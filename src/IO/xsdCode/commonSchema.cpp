// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "commonSchema.h"

namespace commonSchema
{
  // int_3d
  // 

  const int_3d::x_type& int_3d::
  x () const
  {
    return this->x_.get ();
  }

  int_3d::x_type& int_3d::
  x ()
  {
    return this->x_.get ();
  }

  void int_3d::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const int_3d::y_type& int_3d::
  y () const
  {
    return this->y_.get ();
  }

  int_3d::y_type& int_3d::
  y ()
  {
    return this->y_.get ();
  }

  void int_3d::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  const int_3d::z_type& int_3d::
  z () const
  {
    return this->z_.get ();
  }

  int_3d::z_type& int_3d::
  z ()
  {
    return this->z_.get ();
  }

  void int_3d::
  z (const z_type& x)
  {
    this->z_.set (x);
  }


  // double_3d
  // 

  const double_3d::x_type& double_3d::
  x () const
  {
    return this->x_.get ();
  }

  double_3d::x_type& double_3d::
  x ()
  {
    return this->x_.get ();
  }

  void double_3d::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const double_3d::y_type& double_3d::
  y () const
  {
    return this->y_.get ();
  }

  double_3d::y_type& double_3d::
  y ()
  {
    return this->y_.get ();
  }

  void double_3d::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  const double_3d::z_type& double_3d::
  z () const
  {
    return this->z_.get ();
  }

  double_3d::z_type& double_3d::
  z ()
  {
    return this->z_.get ();
  }

  void double_3d::
  z (const z_type& x)
  {
    this->z_.set (x);
  }


  // nonNegativeDouble
  // 


  // nonNegativeInteger
  // 
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace commonSchema
{
  // int_3d
  //

  int_3d::
  int_3d (const x_type& x,
          const y_type& y,
          const z_type& z)
  : ::xml_schema::type (),
    x_ (x, this),
    y_ (y, this),
    z_ (z, this)
  {
  }

  int_3d::
  int_3d (const int_3d& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this)
  {
  }

  int_3d::
  int_3d (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    x_ (this),
    y_ (this),
    z_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void int_3d::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // x
      //
      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        if (!x_.present ())
        {
          this->x_.set (x_traits::create (i, f, this));
          continue;
        }
      }

      // y
      //
      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        if (!y_.present ())
        {
          this->y_.set (y_traits::create (i, f, this));
          continue;
        }
      }

      // z
      //
      if (n.name () == "z" && n.namespace_ ().empty ())
      {
        if (!z_.present ())
        {
          this->z_.set (z_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "y",
        "");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "z",
        "");
    }
  }

  int_3d* int_3d::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class int_3d (*this, f, c);
  }

  int_3d& int_3d::
  operator= (const int_3d& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->x_ = x.x_;
      this->y_ = x.y_;
      this->z_ = x.z_;
    }

    return *this;
  }

  int_3d::
  ~int_3d ()
  {
  }

  // double_3d
  //

  double_3d::
  double_3d (const x_type& x,
             const y_type& y,
             const z_type& z)
  : ::xml_schema::type (),
    x_ (x, this),
    y_ (y, this),
    z_ (z, this)
  {
  }

  double_3d::
  double_3d (const double_3d& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this)
  {
  }

  double_3d::
  double_3d (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    x_ (this),
    y_ (this),
    z_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void double_3d::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // x
      //
      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        if (!x_.present ())
        {
          this->x_.set (x_traits::create (i, f, this));
          continue;
        }
      }

      // y
      //
      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        if (!y_.present ())
        {
          this->y_.set (y_traits::create (i, f, this));
          continue;
        }
      }

      // z
      //
      if (n.name () == "z" && n.namespace_ ().empty ())
      {
        if (!z_.present ())
        {
          this->z_.set (z_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "y",
        "");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "z",
        "");
    }
  }

  double_3d* double_3d::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class double_3d (*this, f, c);
  }

  double_3d& double_3d::
  operator= (const double_3d& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->x_ = x.x_;
      this->y_ = x.y_;
      this->z_ = x.z_;
    }

    return *this;
  }

  double_3d::
  ~double_3d ()
  {
  }

  // nonNegativeDouble
  //

  nonNegativeDouble::
  nonNegativeDouble (const ::xml_schema::double_& _xsd_double__base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (_xsd_double__base)
  {
  }

  nonNegativeDouble::
  nonNegativeDouble (const nonNegativeDouble& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (x, f, c)
  {
  }

  nonNegativeDouble::
  nonNegativeDouble (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (e, f, c)
  {
  }

  nonNegativeDouble::
  nonNegativeDouble (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (a, f, c)
  {
  }

  nonNegativeDouble::
  nonNegativeDouble (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (s, e, f, c)
  {
  }

  nonNegativeDouble* nonNegativeDouble::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class nonNegativeDouble (*this, f, c);
  }

  nonNegativeDouble::
  ~nonNegativeDouble ()
  {
  }

  // nonNegativeInteger
  //

  nonNegativeInteger::
  nonNegativeInteger (const ::xml_schema::integer& _xsd_integer_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (_xsd_integer_base)
  {
  }

  nonNegativeInteger::
  nonNegativeInteger (const nonNegativeInteger& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (x, f, c)
  {
  }

  nonNegativeInteger::
  nonNegativeInteger (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (e, f, c)
  {
  }

  nonNegativeInteger::
  nonNegativeInteger (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (a, f, c)
  {
  }

  nonNegativeInteger::
  nonNegativeInteger (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  nonNegativeInteger* nonNegativeInteger::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class nonNegativeInteger (*this, f, c);
  }

  nonNegativeInteger::
  ~nonNegativeInteger ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace commonSchema
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace commonSchema
{
  void
  operator<< (::xercesc::DOMElement& e, const int_3d& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // x
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "x",
          e));

      s << i.x ();
    }

    // y
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "y",
          e));

      s << i.y ();
    }

    // z
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "z",
          e));

      s << i.z ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const double_3d& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // x
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "x",
          e));

      s << ::xml_schema::as_double(i.x ());
    }

    // y
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "y",
          e));

      s << ::xml_schema::as_double(i.y ());
    }

    // z
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "z",
          e));

      s << ::xml_schema::as_double(i.z ());
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const nonNegativeDouble& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const nonNegativeDouble& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const nonNegativeDouble& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const nonNegativeInteger& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const nonNegativeInteger& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const nonNegativeInteger& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

