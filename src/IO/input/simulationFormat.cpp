// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simulationFormat.h"

// int_3d
// 

const int_3d::x_type& int_3d::
x () const
{
  return this->x_.get ();
}

int_3d::x_type& int_3d::
x ()
{
  return this->x_.get ();
}

void int_3d::
x (const x_type& x)
{
  this->x_.set (x);
}

const int_3d::y_type& int_3d::
y () const
{
  return this->y_.get ();
}

int_3d::y_type& int_3d::
y ()
{
  return this->y_.get ();
}

void int_3d::
y (const y_type& x)
{
  this->y_.set (x);
}

const int_3d::z_type& int_3d::
z () const
{
  return this->z_.get ();
}

int_3d::z_type& int_3d::
z ()
{
  return this->z_.get ();
}

void int_3d::
z (const z_type& x)
{
  this->z_.set (x);
}


// double_3d
// 

const double_3d::x_type& double_3d::
x () const
{
  return this->x_.get ();
}

double_3d::x_type& double_3d::
x ()
{
  return this->x_.get ();
}

void double_3d::
x (const x_type& x)
{
  this->x_.set (x);
}

const double_3d::y_type& double_3d::
y () const
{
  return this->y_.get ();
}

double_3d::y_type& double_3d::
y ()
{
  return this->y_.get ();
}

void double_3d::
y (const y_type& x)
{
  this->y_.set (x);
}

const double_3d::z_type& double_3d::
z () const
{
  return this->z_.get ();
}

double_3d::z_type& double_3d::
z ()
{
  return this->z_.get ();
}

void double_3d::
z (const z_type& x)
{
  this->z_.set (x);
}


// log_level
// 


// nonNegativeDouble
// 


// nonNegativeInteger
// 


// Dimension
// 

Dimension::
Dimension (value v)
: ::xml_schema::string (_xsd_Dimension_literals_[v])
{
}

Dimension::
Dimension (const char* v)
: ::xml_schema::string (v)
{
}

Dimension::
Dimension (const ::std::string& v)
: ::xml_schema::string (v)
{
}

Dimension::
Dimension (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

Dimension::
Dimension (const Dimension& v,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

Dimension& Dimension::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_Dimension_literals_[v]);

  return *this;
}


// lennardJones_t
// 

const lennardJones_t::Epsilon_type& lennardJones_t::
Epsilon () const
{
  return this->Epsilon_.get ();
}

lennardJones_t::Epsilon_type& lennardJones_t::
Epsilon ()
{
  return this->Epsilon_.get ();
}

void lennardJones_t::
Epsilon (const Epsilon_type& x)
{
  this->Epsilon_.set (x);
}

const lennardJones_t::Sigma_type& lennardJones_t::
Sigma () const
{
  return this->Sigma_.get ();
}

lennardJones_t::Sigma_type& lennardJones_t::
Sigma ()
{
  return this->Sigma_.get ();
}

void lennardJones_t::
Sigma (const Sigma_type& x)
{
  this->Sigma_.set (x);
}


// ForceType
// 

const ForceType::lennard_optional& ForceType::
lennard () const
{
  return this->lennard_;
}

ForceType::lennard_optional& ForceType::
lennard ()
{
  return this->lennard_;
}

void ForceType::
lennard (const lennard_type& x)
{
  this->lennard_.set (x);
}

void ForceType::
lennard (const lennard_optional& x)
{
  this->lennard_ = x;
}

void ForceType::
lennard (::std::unique_ptr< lennard_type > x)
{
  this->lennard_.set (std::move (x));
}

const ForceType::grav_optional& ForceType::
grav () const
{
  return this->grav_;
}

ForceType::grav_optional& ForceType::
grav ()
{
  return this->grav_;
}

void ForceType::
grav (const grav_type& x)
{
  this->grav_.set (x);
}

void ForceType::
grav (const grav_optional& x)
{
  this->grav_ = x;
}

void ForceType::
grav (::std::unique_ptr< grav_type > x)
{
  this->grav_.set (std::move (x));
}


// Cuboid
// 

const Cuboid::lower_left_coord_type& Cuboid::
lower_left_coord () const
{
  return this->lower_left_coord_.get ();
}

Cuboid::lower_left_coord_type& Cuboid::
lower_left_coord ()
{
  return this->lower_left_coord_.get ();
}

void Cuboid::
lower_left_coord (const lower_left_coord_type& x)
{
  this->lower_left_coord_.set (x);
}

void Cuboid::
lower_left_coord (::std::unique_ptr< lower_left_coord_type > x)
{
  this->lower_left_coord_.set (std::move (x));
}

const Cuboid::number_of_particles_type& Cuboid::
number_of_particles () const
{
  return this->number_of_particles_.get ();
}

Cuboid::number_of_particles_type& Cuboid::
number_of_particles ()
{
  return this->number_of_particles_.get ();
}

void Cuboid::
number_of_particles (const number_of_particles_type& x)
{
  this->number_of_particles_.set (x);
}

void Cuboid::
number_of_particles (::std::unique_ptr< number_of_particles_type > x)
{
  this->number_of_particles_.set (std::move (x));
}

const Cuboid::distance_type& Cuboid::
distance () const
{
  return this->distance_.get ();
}

Cuboid::distance_type& Cuboid::
distance ()
{
  return this->distance_.get ();
}

void Cuboid::
distance (const distance_type& x)
{
  this->distance_.set (x);
}

void Cuboid::
distance (::std::unique_ptr< distance_type > x)
{
  this->distance_.set (std::move (x));
}

const Cuboid::mass_type& Cuboid::
mass () const
{
  return this->mass_.get ();
}

Cuboid::mass_type& Cuboid::
mass ()
{
  return this->mass_.get ();
}

void Cuboid::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

void Cuboid::
mass (::std::unique_ptr< mass_type > x)
{
  this->mass_.set (std::move (x));
}

const Cuboid::initial_velocity_type& Cuboid::
initial_velocity () const
{
  return this->initial_velocity_.get ();
}

Cuboid::initial_velocity_type& Cuboid::
initial_velocity ()
{
  return this->initial_velocity_.get ();
}

void Cuboid::
initial_velocity (const initial_velocity_type& x)
{
  this->initial_velocity_.set (x);
}

void Cuboid::
initial_velocity (::std::unique_ptr< initial_velocity_type > x)
{
  this->initial_velocity_.set (std::move (x));
}


// Sphere
// 

const Sphere::dimension_type& Sphere::
dimension () const
{
  return this->dimension_.get ();
}

Sphere::dimension_type& Sphere::
dimension ()
{
  return this->dimension_.get ();
}

void Sphere::
dimension (const dimension_type& x)
{
  this->dimension_.set (x);
}

void Sphere::
dimension (::std::unique_ptr< dimension_type > x)
{
  this->dimension_.set (std::move (x));
}

const Sphere::center_type& Sphere::
center () const
{
  return this->center_.get ();
}

Sphere::center_type& Sphere::
center ()
{
  return this->center_.get ();
}

void Sphere::
center (const center_type& x)
{
  this->center_.set (x);
}

void Sphere::
center (::std::unique_ptr< center_type > x)
{
  this->center_.set (std::move (x));
}

const Sphere::radius_type& Sphere::
radius () const
{
  return this->radius_.get ();
}

Sphere::radius_type& Sphere::
radius ()
{
  return this->radius_.get ();
}

void Sphere::
radius (const radius_type& x)
{
  this->radius_.set (x);
}

void Sphere::
radius (::std::unique_ptr< radius_type > x)
{
  this->radius_.set (std::move (x));
}

const Sphere::distance_type& Sphere::
distance () const
{
  return this->distance_.get ();
}

Sphere::distance_type& Sphere::
distance ()
{
  return this->distance_.get ();
}

void Sphere::
distance (const distance_type& x)
{
  this->distance_.set (x);
}

void Sphere::
distance (::std::unique_ptr< distance_type > x)
{
  this->distance_.set (std::move (x));
}

const Sphere::mass_type& Sphere::
mass () const
{
  return this->mass_.get ();
}

Sphere::mass_type& Sphere::
mass ()
{
  return this->mass_.get ();
}

void Sphere::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

void Sphere::
mass (::std::unique_ptr< mass_type > x)
{
  this->mass_.set (std::move (x));
}

const Sphere::initial_velocity_type& Sphere::
initial_velocity () const
{
  return this->initial_velocity_.get ();
}

Sphere::initial_velocity_type& Sphere::
initial_velocity ()
{
  return this->initial_velocity_.get ();
}

void Sphere::
initial_velocity (const initial_velocity_type& x)
{
  this->initial_velocity_.set (x);
}

void Sphere::
initial_velocity (::std::unique_ptr< initial_velocity_type > x)
{
  this->initial_velocity_.set (std::move (x));
}


// BoundaryBehavior
// 

BoundaryBehavior::
BoundaryBehavior (value v)
: ::xml_schema::string (_xsd_BoundaryBehavior_literals_[v])
{
}

BoundaryBehavior::
BoundaryBehavior (const char* v)
: ::xml_schema::string (v)
{
}

BoundaryBehavior::
BoundaryBehavior (const ::std::string& v)
: ::xml_schema::string (v)
{
}

BoundaryBehavior::
BoundaryBehavior (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

BoundaryBehavior::
BoundaryBehavior (const BoundaryBehavior& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

BoundaryBehavior& BoundaryBehavior::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_BoundaryBehavior_literals_[v]);

  return *this;
}


// Boundaries
// 

const Boundaries::BoxSize_type& Boundaries::
BoxSize () const
{
  return this->BoxSize_.get ();
}

Boundaries::BoxSize_type& Boundaries::
BoxSize ()
{
  return this->BoxSize_.get ();
}

void Boundaries::
BoxSize (const BoxSize_type& x)
{
  this->BoxSize_.set (x);
}

void Boundaries::
BoxSize (::std::unique_ptr< BoxSize_type > x)
{
  this->BoxSize_.set (std::move (x));
}

const Boundaries::Front_type& Boundaries::
Front () const
{
  return this->Front_.get ();
}

Boundaries::Front_type& Boundaries::
Front ()
{
  return this->Front_.get ();
}

void Boundaries::
Front (const Front_type& x)
{
  this->Front_.set (x);
}

void Boundaries::
Front (::std::unique_ptr< Front_type > x)
{
  this->Front_.set (std::move (x));
}

const Boundaries::Back_type& Boundaries::
Back () const
{
  return this->Back_.get ();
}

Boundaries::Back_type& Boundaries::
Back ()
{
  return this->Back_.get ();
}

void Boundaries::
Back (const Back_type& x)
{
  this->Back_.set (x);
}

void Boundaries::
Back (::std::unique_ptr< Back_type > x)
{
  this->Back_.set (std::move (x));
}

const Boundaries::Top_type& Boundaries::
Top () const
{
  return this->Top_.get ();
}

Boundaries::Top_type& Boundaries::
Top ()
{
  return this->Top_.get ();
}

void Boundaries::
Top (const Top_type& x)
{
  this->Top_.set (x);
}

void Boundaries::
Top (::std::unique_ptr< Top_type > x)
{
  this->Top_.set (std::move (x));
}

const Boundaries::Right_type& Boundaries::
Right () const
{
  return this->Right_.get ();
}

Boundaries::Right_type& Boundaries::
Right ()
{
  return this->Right_.get ();
}

void Boundaries::
Right (const Right_type& x)
{
  this->Right_.set (x);
}

void Boundaries::
Right (::std::unique_ptr< Right_type > x)
{
  this->Right_.set (std::move (x));
}

const Boundaries::Bottom_type& Boundaries::
Bottom () const
{
  return this->Bottom_.get ();
}

Boundaries::Bottom_type& Boundaries::
Bottom ()
{
  return this->Bottom_.get ();
}

void Boundaries::
Bottom (const Bottom_type& x)
{
  this->Bottom_.set (x);
}

void Boundaries::
Bottom (::std::unique_ptr< Bottom_type > x)
{
  this->Bottom_.set (std::move (x));
}

const Boundaries::Left_type& Boundaries::
Left () const
{
  return this->Left_.get ();
}

Boundaries::Left_type& Boundaries::
Left ()
{
  return this->Left_.get ();
}

void Boundaries::
Left (const Left_type& x)
{
  this->Left_.set (x);
}

void Boundaries::
Left (::std::unique_ptr< Left_type > x)
{
  this->Left_.set (std::move (x));
}


// Simulation_t
// 

const Simulation_t::t_end_optional& Simulation_t::
t_end () const
{
  return this->t_end_;
}

Simulation_t::t_end_optional& Simulation_t::
t_end ()
{
  return this->t_end_;
}

void Simulation_t::
t_end (const t_end_type& x)
{
  this->t_end_.set (x);
}

void Simulation_t::
t_end (const t_end_optional& x)
{
  this->t_end_ = x;
}

Simulation_t::t_end_type Simulation_t::
t_end_default_value ()
{
  return t_end_type (5.0);
}

const Simulation_t::delta_t_optional& Simulation_t::
delta_t () const
{
  return this->delta_t_;
}

Simulation_t::delta_t_optional& Simulation_t::
delta_t ()
{
  return this->delta_t_;
}

void Simulation_t::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

void Simulation_t::
delta_t (const delta_t_optional& x)
{
  this->delta_t_ = x;
}

Simulation_t::delta_t_type Simulation_t::
delta_t_default_value ()
{
  return delta_t_type (.0002);
}

const Simulation_t::force_optional& Simulation_t::
force () const
{
  return this->force_;
}

Simulation_t::force_optional& Simulation_t::
force ()
{
  return this->force_;
}

void Simulation_t::
force (const force_type& x)
{
  this->force_.set (x);
}

void Simulation_t::
force (const force_optional& x)
{
  this->force_ = x;
}

void Simulation_t::
force (::std::unique_ptr< force_type > x)
{
  this->force_.set (std::move (x));
}

const Simulation_t::averageVelo_optional& Simulation_t::
averageVelo () const
{
  return this->averageVelo_;
}

Simulation_t::averageVelo_optional& Simulation_t::
averageVelo ()
{
  return this->averageVelo_;
}

void Simulation_t::
averageVelo (const averageVelo_type& x)
{
  this->averageVelo_.set (x);
}

void Simulation_t::
averageVelo (const averageVelo_optional& x)
{
  this->averageVelo_ = x;
}

Simulation_t::averageVelo_type Simulation_t::
averageVelo_default_value ()
{
  return averageVelo_type (.1);
}

const Simulation_t::boundaries_optional& Simulation_t::
boundaries () const
{
  return this->boundaries_;
}

Simulation_t::boundaries_optional& Simulation_t::
boundaries ()
{
  return this->boundaries_;
}

void Simulation_t::
boundaries (const boundaries_type& x)
{
  this->boundaries_.set (x);
}

void Simulation_t::
boundaries (const boundaries_optional& x)
{
  this->boundaries_ = x;
}

void Simulation_t::
boundaries (::std::unique_ptr< boundaries_type > x)
{
  this->boundaries_.set (std::move (x));
}

const Simulation_t::cutoffRadius_optional& Simulation_t::
cutoffRadius () const
{
  return this->cutoffRadius_;
}

Simulation_t::cutoffRadius_optional& Simulation_t::
cutoffRadius ()
{
  return this->cutoffRadius_;
}

void Simulation_t::
cutoffRadius (const cutoffRadius_type& x)
{
  this->cutoffRadius_.set (x);
}

void Simulation_t::
cutoffRadius (const cutoffRadius_optional& x)
{
  this->cutoffRadius_ = x;
}

void Simulation_t::
cutoffRadius (::std::unique_ptr< cutoffRadius_type > x)
{
  this->cutoffRadius_.set (std::move (x));
}

Simulation_t::cutoffRadius_type Simulation_t::
cutoffRadius_default_value ()
{
  return cutoffRadius_type (3.0);
}

const Simulation_t::cuboid_sequence& Simulation_t::
cuboid () const
{
  return this->cuboid_;
}

Simulation_t::cuboid_sequence& Simulation_t::
cuboid ()
{
  return this->cuboid_;
}

void Simulation_t::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}

const Simulation_t::sphere_sequence& Simulation_t::
sphere () const
{
  return this->sphere_;
}

Simulation_t::sphere_sequence& Simulation_t::
sphere ()
{
  return this->sphere_;
}

void Simulation_t::
sphere (const sphere_sequence& s)
{
  this->sphere_ = s;
}

const Simulation_t::base_name_optional& Simulation_t::
base_name () const
{
  return this->base_name_;
}

Simulation_t::base_name_optional& Simulation_t::
base_name ()
{
  return this->base_name_;
}

void Simulation_t::
base_name (const base_name_type& x)
{
  this->base_name_.set (x);
}

void Simulation_t::
base_name (const base_name_optional& x)
{
  this->base_name_ = x;
}

void Simulation_t::
base_name (::std::unique_ptr< base_name_type > x)
{
  this->base_name_.set (std::move (x));
}

const Simulation_t::base_name_type& Simulation_t::
base_name_default_value ()
{
  return base_name_default_value_;
}

const Simulation_t::writeFrequency_optional& Simulation_t::
writeFrequency () const
{
  return this->writeFrequency_;
}

Simulation_t::writeFrequency_optional& Simulation_t::
writeFrequency ()
{
  return this->writeFrequency_;
}

void Simulation_t::
writeFrequency (const writeFrequency_type& x)
{
  this->writeFrequency_.set (x);
}

void Simulation_t::
writeFrequency (const writeFrequency_optional& x)
{
  this->writeFrequency_ = x;
}

const Simulation_t::log_level_optional& Simulation_t::
log_level () const
{
  return this->log_level_;
}

Simulation_t::log_level_optional& Simulation_t::
log_level ()
{
  return this->log_level_;
}

void Simulation_t::
log_level (const log_level_type& x)
{
  this->log_level_.set (x);
}

void Simulation_t::
log_level (const log_level_optional& x)
{
  this->log_level_ = x;
}

void Simulation_t::
log_level (::std::unique_ptr< log_level_type > x)
{
  this->log_level_.set (std::move (x));
}

Simulation_t::log_level_type Simulation_t::
log_level_default_value ()
{
  return log_level_type (2LL);
}

const Simulation_t::testing_mode_optional& Simulation_t::
testing_mode () const
{
  return this->testing_mode_;
}

Simulation_t::testing_mode_optional& Simulation_t::
testing_mode ()
{
  return this->testing_mode_;
}

void Simulation_t::
testing_mode (const testing_mode_type& x)
{
  this->testing_mode_.set (x);
}

void Simulation_t::
testing_mode (const testing_mode_optional& x)
{
  this->testing_mode_ = x;
}

Simulation_t::testing_mode_type Simulation_t::
testing_mode_default_value ()
{
  return testing_mode_type (false);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// int_3d
//

int_3d::
int_3d (const x_type& x,
        const y_type& y,
        const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

int_3d::
int_3d (const int_3d& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

int_3d::
int_3d (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void int_3d::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

int_3d* int_3d::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class int_3d (*this, f, c);
}

int_3d& int_3d::
operator= (const int_3d& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

int_3d::
~int_3d ()
{
}

// double_3d
//

double_3d::
double_3d (const x_type& x,
           const y_type& y,
           const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

double_3d::
double_3d (const double_3d& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

double_3d::
double_3d (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void double_3d::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

double_3d* double_3d::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class double_3d (*this, f, c);
}

double_3d& double_3d::
operator= (const double_3d& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

double_3d::
~double_3d ()
{
}

// log_level
//

log_level::
log_level (const ::xml_schema::integer& _xsd_integer_base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (_xsd_integer_base)
{
}

log_level::
log_level (const log_level& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (x, f, c)
{
}

log_level::
log_level (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (e, f, c)
{
}

log_level::
log_level (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (a, f, c)
{
}

log_level::
log_level (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (s, e, f, c)
{
}

log_level* log_level::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class log_level (*this, f, c);
}

log_level::
~log_level ()
{
}

// nonNegativeDouble
//

nonNegativeDouble::
nonNegativeDouble (const ::xml_schema::double_& _xsd_double__base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (_xsd_double__base)
{
}

nonNegativeDouble::
nonNegativeDouble (const nonNegativeDouble& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (x, f, c)
{
}

nonNegativeDouble::
nonNegativeDouble (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (e, f, c)
{
}

nonNegativeDouble::
nonNegativeDouble (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (a, f, c)
{
}

nonNegativeDouble::
nonNegativeDouble (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (s, e, f, c)
{
}

nonNegativeDouble* nonNegativeDouble::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class nonNegativeDouble (*this, f, c);
}

nonNegativeDouble::
~nonNegativeDouble ()
{
}

// nonNegativeInteger
//

nonNegativeInteger::
nonNegativeInteger (const ::xml_schema::integer& _xsd_integer_base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (_xsd_integer_base)
{
}

nonNegativeInteger::
nonNegativeInteger (const nonNegativeInteger& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (x, f, c)
{
}

nonNegativeInteger::
nonNegativeInteger (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (e, f, c)
{
}

nonNegativeInteger::
nonNegativeInteger (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (a, f, c)
{
}

nonNegativeInteger::
nonNegativeInteger (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (s, e, f, c)
{
}

nonNegativeInteger* nonNegativeInteger::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class nonNegativeInteger (*this, f, c);
}

nonNegativeInteger::
~nonNegativeInteger ()
{
}

// Dimension
//

Dimension::
Dimension (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_Dimension_convert ();
}

Dimension::
Dimension (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_Dimension_convert ();
}

Dimension::
Dimension (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_Dimension_convert ();
}

Dimension* Dimension::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Dimension (*this, f, c);
}

Dimension::value Dimension::
_xsd_Dimension_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Dimension_literals_);
  const value* i (::std::lower_bound (
                    _xsd_Dimension_indexes_,
                    _xsd_Dimension_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_Dimension_indexes_ + 2 || _xsd_Dimension_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const Dimension::
_xsd_Dimension_literals_[2] =
{
  "2D",
  "3D"
};

const Dimension::value Dimension::
_xsd_Dimension_indexes_[2] =
{
  ::Dimension::cxx_2D,
  ::Dimension::cxx_3D
};

// lennardJones_t
//

lennardJones_t::
lennardJones_t (const Epsilon_type& Epsilon,
                const Sigma_type& Sigma)
: ::xml_schema::type (),
  Epsilon_ (Epsilon, this),
  Sigma_ (Sigma, this)
{
}

lennardJones_t::
lennardJones_t (const lennardJones_t& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Epsilon_ (x.Epsilon_, f, this),
  Sigma_ (x.Sigma_, f, this)
{
}

lennardJones_t::
lennardJones_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Epsilon_ (this),
  Sigma_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void lennardJones_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Epsilon
    //
    if (n.name () == "Epsilon" && n.namespace_ ().empty ())
    {
      if (!Epsilon_.present ())
      {
        this->Epsilon_.set (Epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // Sigma
    //
    if (n.name () == "Sigma" && n.namespace_ ().empty ())
    {
      if (!Sigma_.present ())
      {
        this->Sigma_.set (Sigma_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!Epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Epsilon",
      "");
  }

  if (!Sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Sigma",
      "");
  }
}

lennardJones_t* lennardJones_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class lennardJones_t (*this, f, c);
}

lennardJones_t& lennardJones_t::
operator= (const lennardJones_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Epsilon_ = x.Epsilon_;
    this->Sigma_ = x.Sigma_;
  }

  return *this;
}

lennardJones_t::
~lennardJones_t ()
{
}

// ForceType
//

ForceType::
ForceType ()
: ::xml_schema::type (),
  lennard_ (this),
  grav_ (this)
{
}

ForceType::
ForceType (const ForceType& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  lennard_ (x.lennard_, f, this),
  grav_ (x.grav_, f, this)
{
}

ForceType::
ForceType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  lennard_ (this),
  grav_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ForceType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // lennard
    //
    if (n.name () == "lennard" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< lennard_type > r (
        lennard_traits::create (i, f, this));

      if (!this->lennard_)
      {
        this->lennard_.set (::std::move (r));
        continue;
      }
    }

    // grav
    //
    if (n.name () == "grav" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< grav_type > r (
        grav_traits::create (i, f, this));

      if (!this->grav_)
      {
        this->grav_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

ForceType* ForceType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ForceType (*this, f, c);
}

ForceType& ForceType::
operator= (const ForceType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->lennard_ = x.lennard_;
    this->grav_ = x.grav_;
  }

  return *this;
}

ForceType::
~ForceType ()
{
}

// Cuboid
//

Cuboid::
Cuboid (const lower_left_coord_type& lower_left_coord,
        const number_of_particles_type& number_of_particles,
        const distance_type& distance,
        const mass_type& mass,
        const initial_velocity_type& initial_velocity)
: ::xml_schema::type (),
  lower_left_coord_ (lower_left_coord, this),
  number_of_particles_ (number_of_particles, this),
  distance_ (distance, this),
  mass_ (mass, this),
  initial_velocity_ (initial_velocity, this)
{
}

Cuboid::
Cuboid (::std::unique_ptr< lower_left_coord_type > lower_left_coord,
        ::std::unique_ptr< number_of_particles_type > number_of_particles,
        const distance_type& distance,
        const mass_type& mass,
        ::std::unique_ptr< initial_velocity_type > initial_velocity)
: ::xml_schema::type (),
  lower_left_coord_ (std::move (lower_left_coord), this),
  number_of_particles_ (std::move (number_of_particles), this),
  distance_ (distance, this),
  mass_ (mass, this),
  initial_velocity_ (std::move (initial_velocity), this)
{
}

Cuboid::
Cuboid (const Cuboid& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  lower_left_coord_ (x.lower_left_coord_, f, this),
  number_of_particles_ (x.number_of_particles_, f, this),
  distance_ (x.distance_, f, this),
  mass_ (x.mass_, f, this),
  initial_velocity_ (x.initial_velocity_, f, this)
{
}

Cuboid::
Cuboid (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  lower_left_coord_ (this),
  number_of_particles_ (this),
  distance_ (this),
  mass_ (this),
  initial_velocity_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Cuboid::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // lower-left-coord
    //
    if (n.name () == "lower-left-coord" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< lower_left_coord_type > r (
        lower_left_coord_traits::create (i, f, this));

      if (!lower_left_coord_.present ())
      {
        this->lower_left_coord_.set (::std::move (r));
        continue;
      }
    }

    // number-of-particles
    //
    if (n.name () == "number-of-particles" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< number_of_particles_type > r (
        number_of_particles_traits::create (i, f, this));

      if (!number_of_particles_.present ())
      {
        this->number_of_particles_.set (::std::move (r));
        continue;
      }
    }

    // distance
    //
    if (n.name () == "distance" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< distance_type > r (
        distance_traits::create (i, f, this));

      if (!distance_.present ())
      {
        this->distance_.set (::std::move (r));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< mass_type > r (
        mass_traits::create (i, f, this));

      if (!mass_.present ())
      {
        this->mass_.set (::std::move (r));
        continue;
      }
    }

    // initial_velocity
    //
    if (n.name () == "initial_velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< initial_velocity_type > r (
        initial_velocity_traits::create (i, f, this));

      if (!initial_velocity_.present ())
      {
        this->initial_velocity_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!lower_left_coord_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "lower-left-coord",
      "");
  }

  if (!number_of_particles_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "number-of-particles",
      "");
  }

  if (!distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "distance",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!initial_velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "initial_velocity",
      "");
  }
}

Cuboid* Cuboid::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Cuboid (*this, f, c);
}

Cuboid& Cuboid::
operator= (const Cuboid& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->lower_left_coord_ = x.lower_left_coord_;
    this->number_of_particles_ = x.number_of_particles_;
    this->distance_ = x.distance_;
    this->mass_ = x.mass_;
    this->initial_velocity_ = x.initial_velocity_;
  }

  return *this;
}

Cuboid::
~Cuboid ()
{
}

// Sphere
//

Sphere::
Sphere (const dimension_type& dimension,
        const center_type& center,
        const radius_type& radius,
        const distance_type& distance,
        const mass_type& mass,
        const initial_velocity_type& initial_velocity)
: ::xml_schema::type (),
  dimension_ (dimension, this),
  center_ (center, this),
  radius_ (radius, this),
  distance_ (distance, this),
  mass_ (mass, this),
  initial_velocity_ (initial_velocity, this)
{
}

Sphere::
Sphere (const dimension_type& dimension,
        ::std::unique_ptr< center_type > center,
        const radius_type& radius,
        const distance_type& distance,
        const mass_type& mass,
        ::std::unique_ptr< initial_velocity_type > initial_velocity)
: ::xml_schema::type (),
  dimension_ (dimension, this),
  center_ (std::move (center), this),
  radius_ (radius, this),
  distance_ (distance, this),
  mass_ (mass, this),
  initial_velocity_ (std::move (initial_velocity), this)
{
}

Sphere::
Sphere (const Sphere& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  dimension_ (x.dimension_, f, this),
  center_ (x.center_, f, this),
  radius_ (x.radius_, f, this),
  distance_ (x.distance_, f, this),
  mass_ (x.mass_, f, this),
  initial_velocity_ (x.initial_velocity_, f, this)
{
}

Sphere::
Sphere (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dimension_ (this),
  center_ (this),
  radius_ (this),
  distance_ (this),
  mass_ (this),
  initial_velocity_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Sphere::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dimension
    //
    if (n.name () == "dimension" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimension_type > r (
        dimension_traits::create (i, f, this));

      if (!dimension_.present ())
      {
        this->dimension_.set (::std::move (r));
        continue;
      }
    }

    // center
    //
    if (n.name () == "center" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< center_type > r (
        center_traits::create (i, f, this));

      if (!center_.present ())
      {
        this->center_.set (::std::move (r));
        continue;
      }
    }

    // radius
    //
    if (n.name () == "radius" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< radius_type > r (
        radius_traits::create (i, f, this));

      if (!radius_.present ())
      {
        this->radius_.set (::std::move (r));
        continue;
      }
    }

    // distance
    //
    if (n.name () == "distance" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< distance_type > r (
        distance_traits::create (i, f, this));

      if (!distance_.present ())
      {
        this->distance_.set (::std::move (r));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< mass_type > r (
        mass_traits::create (i, f, this));

      if (!mass_.present ())
      {
        this->mass_.set (::std::move (r));
        continue;
      }
    }

    // initial_velocity
    //
    if (n.name () == "initial_velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< initial_velocity_type > r (
        initial_velocity_traits::create (i, f, this));

      if (!initial_velocity_.present ())
      {
        this->initial_velocity_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!dimension_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimension",
      "");
  }

  if (!center_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "center",
      "");
  }

  if (!radius_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "radius",
      "");
  }

  if (!distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "distance",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!initial_velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "initial_velocity",
      "");
  }
}

Sphere* Sphere::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Sphere (*this, f, c);
}

Sphere& Sphere::
operator= (const Sphere& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->dimension_ = x.dimension_;
    this->center_ = x.center_;
    this->radius_ = x.radius_;
    this->distance_ = x.distance_;
    this->mass_ = x.mass_;
    this->initial_velocity_ = x.initial_velocity_;
  }

  return *this;
}

Sphere::
~Sphere ()
{
}

// BoundaryBehavior
//

BoundaryBehavior::
BoundaryBehavior (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_BoundaryBehavior_convert ();
}

BoundaryBehavior::
BoundaryBehavior (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_BoundaryBehavior_convert ();
}

BoundaryBehavior::
BoundaryBehavior (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_BoundaryBehavior_convert ();
}

BoundaryBehavior* BoundaryBehavior::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class BoundaryBehavior (*this, f, c);
}

BoundaryBehavior::value BoundaryBehavior::
_xsd_BoundaryBehavior_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BoundaryBehavior_literals_);
  const value* i (::std::lower_bound (
                    _xsd_BoundaryBehavior_indexes_,
                    _xsd_BoundaryBehavior_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_BoundaryBehavior_indexes_ + 2 || _xsd_BoundaryBehavior_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const BoundaryBehavior::
_xsd_BoundaryBehavior_literals_[2] =
{
  "Outflow",
  "Reflecting"
};

const BoundaryBehavior::value BoundaryBehavior::
_xsd_BoundaryBehavior_indexes_[2] =
{
  ::BoundaryBehavior::Outflow,
  ::BoundaryBehavior::Reflecting
};

// Boundaries
//

Boundaries::
Boundaries (const BoxSize_type& BoxSize,
            const Front_type& Front,
            const Back_type& Back,
            const Top_type& Top,
            const Right_type& Right,
            const Bottom_type& Bottom,
            const Left_type& Left)
: ::xml_schema::type (),
  BoxSize_ (BoxSize, this),
  Front_ (Front, this),
  Back_ (Back, this),
  Top_ (Top, this),
  Right_ (Right, this),
  Bottom_ (Bottom, this),
  Left_ (Left, this)
{
}

Boundaries::
Boundaries (::std::unique_ptr< BoxSize_type > BoxSize,
            const Front_type& Front,
            const Back_type& Back,
            const Top_type& Top,
            const Right_type& Right,
            const Bottom_type& Bottom,
            const Left_type& Left)
: ::xml_schema::type (),
  BoxSize_ (std::move (BoxSize), this),
  Front_ (Front, this),
  Back_ (Back, this),
  Top_ (Top, this),
  Right_ (Right, this),
  Bottom_ (Bottom, this),
  Left_ (Left, this)
{
}

Boundaries::
Boundaries (const Boundaries& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  BoxSize_ (x.BoxSize_, f, this),
  Front_ (x.Front_, f, this),
  Back_ (x.Back_, f, this),
  Top_ (x.Top_, f, this),
  Right_ (x.Right_, f, this),
  Bottom_ (x.Bottom_, f, this),
  Left_ (x.Left_, f, this)
{
}

Boundaries::
Boundaries (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  BoxSize_ (this),
  Front_ (this),
  Back_ (this),
  Top_ (this),
  Right_ (this),
  Bottom_ (this),
  Left_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Boundaries::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // BoxSize
    //
    if (n.name () == "BoxSize" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< BoxSize_type > r (
        BoxSize_traits::create (i, f, this));

      if (!BoxSize_.present ())
      {
        this->BoxSize_.set (::std::move (r));
        continue;
      }
    }

    // Front
    //
    if (n.name () == "Front" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Front_type > r (
        Front_traits::create (i, f, this));

      if (!Front_.present ())
      {
        this->Front_.set (::std::move (r));
        continue;
      }
    }

    // Back
    //
    if (n.name () == "Back" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Back_type > r (
        Back_traits::create (i, f, this));

      if (!Back_.present ())
      {
        this->Back_.set (::std::move (r));
        continue;
      }
    }

    // Top
    //
    if (n.name () == "Top" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Top_type > r (
        Top_traits::create (i, f, this));

      if (!Top_.present ())
      {
        this->Top_.set (::std::move (r));
        continue;
      }
    }

    // Right
    //
    if (n.name () == "Right" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Right_type > r (
        Right_traits::create (i, f, this));

      if (!Right_.present ())
      {
        this->Right_.set (::std::move (r));
        continue;
      }
    }

    // Bottom
    //
    if (n.name () == "Bottom" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Bottom_type > r (
        Bottom_traits::create (i, f, this));

      if (!Bottom_.present ())
      {
        this->Bottom_.set (::std::move (r));
        continue;
      }
    }

    // Left
    //
    if (n.name () == "Left" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Left_type > r (
        Left_traits::create (i, f, this));

      if (!Left_.present ())
      {
        this->Left_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!BoxSize_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "BoxSize",
      "");
  }

  if (!Front_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Front",
      "");
  }

  if (!Back_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Back",
      "");
  }

  if (!Top_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Top",
      "");
  }

  if (!Right_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Right",
      "");
  }

  if (!Bottom_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Bottom",
      "");
  }

  if (!Left_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Left",
      "");
  }
}

Boundaries* Boundaries::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Boundaries (*this, f, c);
}

Boundaries& Boundaries::
operator= (const Boundaries& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->BoxSize_ = x.BoxSize_;
    this->Front_ = x.Front_;
    this->Back_ = x.Back_;
    this->Top_ = x.Top_;
    this->Right_ = x.Right_;
    this->Bottom_ = x.Bottom_;
    this->Left_ = x.Left_;
  }

  return *this;
}

Boundaries::
~Boundaries ()
{
}

// Simulation_t
//

const Simulation_t::base_name_type Simulation_t::base_name_default_value_ (
  "MD_vtk");

Simulation_t::
Simulation_t ()
: ::xml_schema::type (),
  t_end_ (this),
  delta_t_ (this),
  force_ (this),
  averageVelo_ (this),
  boundaries_ (this),
  cutoffRadius_ (this),
  cuboid_ (this),
  sphere_ (this),
  base_name_ (this),
  writeFrequency_ (this),
  log_level_ (this),
  testing_mode_ (this)
{
}

Simulation_t::
Simulation_t (const Simulation_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  t_end_ (x.t_end_, f, this),
  delta_t_ (x.delta_t_, f, this),
  force_ (x.force_, f, this),
  averageVelo_ (x.averageVelo_, f, this),
  boundaries_ (x.boundaries_, f, this),
  cutoffRadius_ (x.cutoffRadius_, f, this),
  cuboid_ (x.cuboid_, f, this),
  sphere_ (x.sphere_, f, this),
  base_name_ (x.base_name_, f, this),
  writeFrequency_ (x.writeFrequency_, f, this),
  log_level_ (x.log_level_, f, this),
  testing_mode_ (x.testing_mode_, f, this)
{
}

Simulation_t::
Simulation_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  t_end_ (this),
  delta_t_ (this),
  force_ (this),
  averageVelo_ (this),
  boundaries_ (this),
  cutoffRadius_ (this),
  cuboid_ (this),
  sphere_ (this),
  base_name_ (this),
  writeFrequency_ (this),
  log_level_ (this),
  testing_mode_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Simulation_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // t_end
    //
    if (n.name () == "t_end" && n.namespace_ ().empty ())
    {
      if (!this->t_end_)
      {
        this->t_end_.set (t_end_traits::create (i, f, this));
        continue;
      }
    }

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!this->delta_t_)
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // force
    //
    if (n.name () == "force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< force_type > r (
        force_traits::create (i, f, this));

      if (!this->force_)
      {
        this->force_.set (::std::move (r));
        continue;
      }
    }

    // averageVelo
    //
    if (n.name () == "averageVelo" && n.namespace_ ().empty ())
    {
      if (!this->averageVelo_)
      {
        this->averageVelo_.set (averageVelo_traits::create (i, f, this));
        continue;
      }
    }

    // boundaries
    //
    if (n.name () == "boundaries" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< boundaries_type > r (
        boundaries_traits::create (i, f, this));

      if (!this->boundaries_)
      {
        this->boundaries_.set (::std::move (r));
        continue;
      }
    }

    // cutoffRadius
    //
    if (n.name () == "cutoffRadius" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cutoffRadius_type > r (
        cutoffRadius_traits::create (i, f, this));

      if (!this->cutoffRadius_)
      {
        this->cutoffRadius_.set (::std::move (r));
        continue;
      }
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (::std::move (r));
      continue;
    }

    // sphere
    //
    if (n.name () == "sphere" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< sphere_type > r (
        sphere_traits::create (i, f, this));

      this->sphere_.push_back (::std::move (r));
      continue;
    }

    // base_name
    //
    if (n.name () == "base_name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< base_name_type > r (
        base_name_traits::create (i, f, this));

      if (!this->base_name_)
      {
        this->base_name_.set (::std::move (r));
        continue;
      }
    }

    // writeFrequency
    //
    if (n.name () == "writeFrequency" && n.namespace_ ().empty ())
    {
      if (!this->writeFrequency_)
      {
        this->writeFrequency_.set (writeFrequency_traits::create (i, f, this));
        continue;
      }
    }

    // log_level
    //
    if (n.name () == "log_level" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< log_level_type > r (
        log_level_traits::create (i, f, this));

      if (!this->log_level_)
      {
        this->log_level_.set (::std::move (r));
        continue;
      }
    }

    // testing_mode
    //
    if (n.name () == "testing_mode" && n.namespace_ ().empty ())
    {
      if (!this->testing_mode_)
      {
        this->testing_mode_.set (testing_mode_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }
}

Simulation_t* Simulation_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Simulation_t (*this, f, c);
}

Simulation_t& Simulation_t::
operator= (const Simulation_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->t_end_ = x.t_end_;
    this->delta_t_ = x.delta_t_;
    this->force_ = x.force_;
    this->averageVelo_ = x.averageVelo_;
    this->boundaries_ = x.boundaries_;
    this->cutoffRadius_ = x.cutoffRadius_;
    this->cuboid_ = x.cuboid_;
    this->sphere_ = x.sphere_;
    this->base_name_ = x.base_name_;
    this->writeFrequency_ = x.writeFrequency_;
    this->log_level_ = x.log_level_;
    this->testing_mode_ = x.testing_mode_;
  }

  return *this;
}

Simulation_t::
~Simulation_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::Simulation_t >
Simulation (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Simulation_t > (
    ::Simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Simulation_t >
Simulation (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Simulation_t > (
    ::Simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Simulation_t >
Simulation (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Simulation_t > (
    ::Simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Simulation (isrc, f, p);
}

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Simulation (isrc, h, f, p);
}

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Simulation (isrc, h, f, p);
}

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Simulation (isrc, f, p);
}

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Simulation (isrc, h, f, p);
}

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Simulation (isrc, h, f, p);
}

::std::unique_ptr< ::Simulation_t >
Simulation (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Simulation_t > (
    ::Simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Simulation_t >
Simulation (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Simulation_t > (
    ::Simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Simulation_t >
Simulation (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Simulation_t > (
    ::Simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Simulation_t >
Simulation (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::Simulation_t > (
      ::Simulation (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Simulation_t > r (
      ::xsd::cxx::tree::traits< ::Simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Simulation",
    "");
}

::std::unique_ptr< ::Simulation_t >
Simulation (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Simulation_t > r (
      ::xsd::cxx::tree::traits< ::Simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Simulation",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

