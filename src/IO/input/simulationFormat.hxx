// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_________INPUT_SIMULATION_FORMAT_HXX
#define CXX_________INPUT_SIMULATION_FORMAT_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class int_3d;
class double_3d;
class log_level;
class lennardJones_t;
class ForceType;
class Cuboid;
class Simulation_t;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class int_3d: public ::xml_schema::type
{
  public:
  // x
  //
  typedef ::xml_schema::integer x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::integer y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  //
  typedef ::xml_schema::integer z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // Constructors.
  //
  int_3d (const x_type&,
          const y_type&,
          const z_type&);

  int_3d (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  int_3d (const int_3d& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual int_3d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  int_3d&
  operator= (const int_3d& x);

  virtual 
  ~int_3d ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
};

class double_3d: public ::xml_schema::type
{
  public:
  // x
  //
  typedef ::xml_schema::double_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char, ::xsd::cxx::tree::schema_type::double_ > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::double_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char, ::xsd::cxx::tree::schema_type::double_ > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  //
  typedef ::xml_schema::double_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char, ::xsd::cxx::tree::schema_type::double_ > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // Constructors.
  //
  double_3d (const x_type&,
             const y_type&,
             const z_type&);

  double_3d (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  double_3d (const double_3d& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual double_3d*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  double_3d&
  operator= (const double_3d& x);

  virtual 
  ~double_3d ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
};

class log_level: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  log_level (const ::xml_schema::integer&);

  log_level (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  log_level (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  log_level (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  log_level (const log_level& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual log_level*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~log_level ();
};

class lennardJones_t: public ::xml_schema::type
{
  public:
  // Epsilon
  //
  typedef ::xml_schema::double_ Epsilon_type;
  typedef ::xsd::cxx::tree::traits< Epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > Epsilon_traits;

  const Epsilon_type&
  Epsilon () const;

  Epsilon_type&
  Epsilon ();

  void
  Epsilon (const Epsilon_type& x);

  // Sigma
  //
  typedef ::xml_schema::double_ Sigma_type;
  typedef ::xsd::cxx::tree::traits< Sigma_type, char, ::xsd::cxx::tree::schema_type::double_ > Sigma_traits;

  const Sigma_type&
  Sigma () const;

  Sigma_type&
  Sigma ();

  void
  Sigma (const Sigma_type& x);

  // Constructors.
  //
  lennardJones_t (const Epsilon_type&,
                  const Sigma_type&);

  lennardJones_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  lennardJones_t (const lennardJones_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual lennardJones_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  lennardJones_t&
  operator= (const lennardJones_t& x);

  virtual 
  ~lennardJones_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Epsilon_type > Epsilon_;
  ::xsd::cxx::tree::one< Sigma_type > Sigma_;
};

class ForceType: public ::xml_schema::type
{
  public:
  // lennard
  //
  typedef ::lennardJones_t lennard_type;
  typedef ::xsd::cxx::tree::optional< lennard_type > lennard_optional;
  typedef ::xsd::cxx::tree::traits< lennard_type, char > lennard_traits;

  const lennard_optional&
  lennard () const;

  lennard_optional&
  lennard ();

  void
  lennard (const lennard_type& x);

  void
  lennard (const lennard_optional& x);

  void
  lennard (::std::unique_ptr< lennard_type > p);

  // grav
  //
  typedef ::xml_schema::string grav_type;
  typedef ::xsd::cxx::tree::optional< grav_type > grav_optional;
  typedef ::xsd::cxx::tree::traits< grav_type, char > grav_traits;

  const grav_optional&
  grav () const;

  grav_optional&
  grav ();

  void
  grav (const grav_type& x);

  void
  grav (const grav_optional& x);

  void
  grav (::std::unique_ptr< grav_type > p);

  // Constructors.
  //
  ForceType ();

  ForceType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ForceType (const ForceType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual ForceType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ForceType&
  operator= (const ForceType& x);

  virtual 
  ~ForceType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  lennard_optional lennard_;
  grav_optional grav_;
};

class Cuboid: public ::xml_schema::type
{
  public:
  // lower-left-coord
  //
  typedef ::double_3d lower_left_coord_type;
  typedef ::xsd::cxx::tree::traits< lower_left_coord_type, char > lower_left_coord_traits;

  const lower_left_coord_type&
  lower_left_coord () const;

  lower_left_coord_type&
  lower_left_coord ();

  void
  lower_left_coord (const lower_left_coord_type& x);

  void
  lower_left_coord (::std::unique_ptr< lower_left_coord_type > p);

  // number-of-particles
  //
  typedef ::int_3d number_of_particles_type;
  typedef ::xsd::cxx::tree::traits< number_of_particles_type, char > number_of_particles_traits;

  const number_of_particles_type&
  number_of_particles () const;

  number_of_particles_type&
  number_of_particles ();

  void
  number_of_particles (const number_of_particles_type& x);

  void
  number_of_particles (::std::unique_ptr< number_of_particles_type > p);

  // distance
  //
  typedef ::xml_schema::double_ distance_type;
  typedef ::xsd::cxx::tree::traits< distance_type, char, ::xsd::cxx::tree::schema_type::double_ > distance_traits;

  const distance_type&
  distance () const;

  distance_type&
  distance ();

  void
  distance (const distance_type& x);

  // mass
  //
  typedef ::xml_schema::double_ mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  // initial_velocity
  //
  typedef ::double_3d initial_velocity_type;
  typedef ::xsd::cxx::tree::traits< initial_velocity_type, char > initial_velocity_traits;

  const initial_velocity_type&
  initial_velocity () const;

  initial_velocity_type&
  initial_velocity ();

  void
  initial_velocity (const initial_velocity_type& x);

  void
  initial_velocity (::std::unique_ptr< initial_velocity_type > p);

  // Constructors.
  //
  Cuboid (const lower_left_coord_type&,
          const number_of_particles_type&,
          const distance_type&,
          const mass_type&,
          const initial_velocity_type&);

  Cuboid (::std::unique_ptr< lower_left_coord_type >,
          ::std::unique_ptr< number_of_particles_type >,
          const distance_type&,
          const mass_type&,
          ::std::unique_ptr< initial_velocity_type >);

  Cuboid (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Cuboid (const Cuboid& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Cuboid*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Cuboid&
  operator= (const Cuboid& x);

  virtual 
  ~Cuboid ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< lower_left_coord_type > lower_left_coord_;
  ::xsd::cxx::tree::one< number_of_particles_type > number_of_particles_;
  ::xsd::cxx::tree::one< distance_type > distance_;
  ::xsd::cxx::tree::one< mass_type > mass_;
  ::xsd::cxx::tree::one< initial_velocity_type > initial_velocity_;
};

class Simulation_t: public ::xml_schema::type
{
  public:
  // t_end
  //
  typedef ::xml_schema::double_ t_end_type;
  typedef ::xsd::cxx::tree::optional< t_end_type > t_end_optional;
  typedef ::xsd::cxx::tree::traits< t_end_type, char, ::xsd::cxx::tree::schema_type::double_ > t_end_traits;

  const t_end_optional&
  t_end () const;

  t_end_optional&
  t_end ();

  void
  t_end (const t_end_type& x);

  void
  t_end (const t_end_optional& x);

  static t_end_type
  t_end_default_value ();

  // delta_t
  //
  typedef ::xml_schema::double_ delta_t_type;
  typedef ::xsd::cxx::tree::optional< delta_t_type > delta_t_optional;
  typedef ::xsd::cxx::tree::traits< delta_t_type, char, ::xsd::cxx::tree::schema_type::double_ > delta_t_traits;

  const delta_t_optional&
  delta_t () const;

  delta_t_optional&
  delta_t ();

  void
  delta_t (const delta_t_type& x);

  void
  delta_t (const delta_t_optional& x);

  static delta_t_type
  delta_t_default_value ();

  // force
  //
  typedef ::ForceType force_type;
  typedef ::xsd::cxx::tree::optional< force_type > force_optional;
  typedef ::xsd::cxx::tree::traits< force_type, char > force_traits;

  const force_optional&
  force () const;

  force_optional&
  force ();

  void
  force (const force_type& x);

  void
  force (const force_optional& x);

  void
  force (::std::unique_ptr< force_type > p);

  // averageVelo
  //
  typedef ::xml_schema::double_ averageVelo_type;
  typedef ::xsd::cxx::tree::optional< averageVelo_type > averageVelo_optional;
  typedef ::xsd::cxx::tree::traits< averageVelo_type, char, ::xsd::cxx::tree::schema_type::double_ > averageVelo_traits;

  const averageVelo_optional&
  averageVelo () const;

  averageVelo_optional&
  averageVelo ();

  void
  averageVelo (const averageVelo_type& x);

  void
  averageVelo (const averageVelo_optional& x);

  static averageVelo_type
  averageVelo_default_value ();

  // cuboid
  //
  typedef ::Cuboid cuboid_type;
  typedef ::xsd::cxx::tree::sequence< cuboid_type > cuboid_sequence;
  typedef cuboid_sequence::iterator cuboid_iterator;
  typedef cuboid_sequence::const_iterator cuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits< cuboid_type, char > cuboid_traits;

  const cuboid_sequence&
  cuboid () const;

  cuboid_sequence&
  cuboid ();

  void
  cuboid (const cuboid_sequence& s);

  // base_name
  //
  typedef ::xml_schema::string base_name_type;
  typedef ::xsd::cxx::tree::optional< base_name_type > base_name_optional;
  typedef ::xsd::cxx::tree::traits< base_name_type, char > base_name_traits;

  const base_name_optional&
  base_name () const;

  base_name_optional&
  base_name ();

  void
  base_name (const base_name_type& x);

  void
  base_name (const base_name_optional& x);

  void
  base_name (::std::unique_ptr< base_name_type > p);

  static const base_name_type&
  base_name_default_value ();

  // writeFrequency
  //
  typedef ::xml_schema::int_ writeFrequency_type;
  typedef ::xsd::cxx::tree::optional< writeFrequency_type > writeFrequency_optional;
  typedef ::xsd::cxx::tree::traits< writeFrequency_type, char > writeFrequency_traits;

  const writeFrequency_optional&
  writeFrequency () const;

  writeFrequency_optional&
  writeFrequency ();

  void
  writeFrequency (const writeFrequency_type& x);

  void
  writeFrequency (const writeFrequency_optional& x);

  // log_level
  //
  typedef ::log_level log_level_type;
  typedef ::xsd::cxx::tree::optional< log_level_type > log_level_optional;
  typedef ::xsd::cxx::tree::traits< log_level_type, char > log_level_traits;

  const log_level_optional&
  log_level () const;

  log_level_optional&
  log_level ();

  void
  log_level (const log_level_type& x);

  void
  log_level (const log_level_optional& x);

  void
  log_level (::std::unique_ptr< log_level_type > p);

  static log_level_type
  log_level_default_value ();

  // testing_mode
  //
  typedef ::xml_schema::boolean testing_mode_type;
  typedef ::xsd::cxx::tree::optional< testing_mode_type > testing_mode_optional;
  typedef ::xsd::cxx::tree::traits< testing_mode_type, char > testing_mode_traits;

  const testing_mode_optional&
  testing_mode () const;

  testing_mode_optional&
  testing_mode ();

  void
  testing_mode (const testing_mode_type& x);

  void
  testing_mode (const testing_mode_optional& x);

  static testing_mode_type
  testing_mode_default_value ();

  // Constructors.
  //
  Simulation_t ();

  Simulation_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  Simulation_t (const Simulation_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual Simulation_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Simulation_t&
  operator= (const Simulation_t& x);

  virtual 
  ~Simulation_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  t_end_optional t_end_;
  delta_t_optional delta_t_;
  force_optional force_;
  averageVelo_optional averageVelo_;
  cuboid_sequence cuboid_;
  base_name_optional base_name_;
  static const base_name_type base_name_default_value_;
  writeFrequency_optional writeFrequency_;
  log_level_optional log_level_;
  testing_mode_optional testing_mode_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::Simulation_t >
Simulation (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Simulation_t >
Simulation (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Simulation_t >
Simulation (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Simulation_t >
Simulation (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_________INPUT_SIMULATION_FORMAT_HXX
