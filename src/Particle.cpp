/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"

#include <iostream>
#include "utils/ArrayUtils.h"

Particle::Particle(int type_arg) {
    type = type_arg;
    std::cout << "Particle generated!" << std::endl;
    f = {0., 0., 0.};
    old_f = {0., 0., 0.};
}

Particle::Particle(const Particle &other) {
    x = other.x;
    v = other.v;
    f = other.f;
    old_f = other.old_f;
    m = other.m;
    type = other.type;
    std::cout << "Particle generated by copy!" << std::endl;
}

Particle::Particle(std::array<double, 3> x_arg, std::array<double, 3> v_arg,
                   double m_arg, int type_arg) : f{0., 0., 0.}, old_f{0., 0., 0.} {
    x = x_arg;
    v = v_arg;
    m = m_arg;
    type = type_arg;
    std::cout << "Particle generated!" << std::endl;
}

Particle::~Particle() { std::cout << "Particle destructed!" << std::endl; }

const std::array<double, 3> &Particle::getX() const { return x; }

const std::array<double, 3> &Particle::getV() const { return v; }

const std::array<double, 3> &Particle::getF() const { return f; }

const std::array<double, 3> &Particle::getOldF() const { return old_f; }

double Particle::getM() const { return m; }

int Particle::getType() const { return type; }

std::string Particle::toString() const {
    std::stringstream stream;
    stream << "Particle: X:" << x << " v: " << v << " f: " << f
           << " old_f: " << old_f << " type: " << type;
    return stream.str();
}

bool Particle::operator==(Particle &other) {
    return (x == other.x) and (v == other.v) and (f == other.f) and
           (type == other.type) and (m == other.m) and (old_f == other.old_f);
}

VectorDouble Particle::getXVector() const {
    return VectorDouble(x);
}

VectorDouble Particle::getVVector() const {
    return VectorDouble(v);
}

VectorDouble Particle::getFVector() const {
    return VectorDouble(f);
}

VectorDouble Particle::getOldFVector() const {
    return VectorDouble(old_f);
}

void Particle::setX(const VectorDouble &position) {
    x = position.convertToArray();
}

void Particle::setV(const VectorDouble &velocity) {
     v = velocity.convertToArray();
}

void Particle::setF(const VectorDouble &force) {
    f = force.convertToArray();
}

void Particle::setOldF(const VectorDouble &oldForce) {
    old_f = oldForce.convertToArray();
}

std::ostream &operator<<(std::ostream &stream, Particle &p) {
    stream << p.toString();
    return stream;
}
